[{"E:\\guc\\micro\\project\\src\\reportWebVitals.js":"1","E:\\guc\\micro\\project\\src\\Components\\Registerfile.js":"2","E:\\guc\\micro\\project\\src\\Components\\InstructionQueue.js":"3","E:\\guc\\micro\\project\\src\\Instructionset.js":"4","E:\\guc\\micro\\project\\src\\App.js":"5","E:\\guc\\micro\\project\\src\\index.js":"6","E:\\guc\\micro\\project\\src\\Components\\AddReservationStation.js":"7","E:\\guc\\micro\\project\\src\\Components\\MulReservationStation.js":"8","E:\\guc\\micro\\project\\src\\Components\\LoadBuffer.js":"9","E:\\guc\\micro\\project\\src\\Components\\StoreBuffer.js":"10","E:\\guc\\micro\\project\\src\\Components\\InputInstructions.js":"11"},{"size":362,"mtime":1610053680005,"results":"12","hashOfConfig":"13"},{"size":964,"mtime":1611976517339,"results":"14","hashOfConfig":"13"},{"size":3933,"mtime":1611980693256,"results":"15","hashOfConfig":"13"},{"size":1273,"mtime":1611947975215,"results":"16","hashOfConfig":"13"},{"size":24193,"mtime":1612102496906,"results":"17","hashOfConfig":"13"},{"size":500,"mtime":1610053680005,"results":"18","hashOfConfig":"13"},{"size":1530,"mtime":1611982879021,"results":"19","hashOfConfig":"13"},{"size":1461,"mtime":1611982901291,"results":"20","hashOfConfig":"13"},{"size":1081,"mtime":1611982809939,"results":"21","hashOfConfig":"13"},{"size":1160,"mtime":1611982785884,"results":"22","hashOfConfig":"13"},{"size":5634,"mtime":1611984032711,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"cvw0hg",{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","errorCount":0,"warningCount":38,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"45","messages":"46","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47"},"E:\\guc\\micro\\project\\src\\reportWebVitals.js",[],"E:\\guc\\micro\\project\\src\\Components\\Registerfile.js",[],"E:\\guc\\micro\\project\\src\\Components\\InstructionQueue.js",["48"],"E:\\guc\\micro\\project\\src\\Instructionset.js",[],"E:\\guc\\micro\\project\\src\\App.js",["49","50","51","52","53","54","55","56","57","58","59","60","61","62","63","64","65","66","67","68","69","70","71","72","73","74","75","76","77","78","79","80","81","82","83","84","85","86"],"import \"./App.css\";\nimport InstructionQueue from \"./Components/InstructionQueue\";\nimport Registerfile from \"./Components/Registerfile\";\nimport { useState } from \"react\";\n// import { InstructionSet } from \"./Instructionset\";\nimport AddReservationStation from \"./Components/AddReservationStation\";\nimport MulReservationStation from \"./Components/MulReservationStation\";\nimport InputInstructions from \"./Components/InputInstructions\";\nimport LoadBuffer from \"./Components/LoadBuffer\";\nimport StoreBuffer from \"./Components/StoreBuffer\";\nimport \"semantic-ui-css/semantic.min.css\";\n\nimport {\n  Button,\n  Container,\n  Grid,\n  Header,\n  Icon,\n  Popup,\n  Segment,\n  Table,\n} from \"semantic-ui-react\";\n\nlet currentInstruction = -1;\nfunction App() {\n  const Register = {\n    R0: 0,\n    R1: 1,\n    R2: 2,\n    R3: 3,\n    R4: 4,\n    R5: 5,\n    R6: 6,\n    R7: 7,\n    R8: 8,\n    R9: 9,\n  };\n  const Memory = [100, 189, 8494, 84, 5, 56, 478, 63, 614, 447];\n  const [cycleNumber, setCycleNumber] = useState(1);\n  const [instructions, setInstructions] = useState([]);\n  const [disable, setDisable] = useState(false);\n  const [loadBuffer, setLoadbuffer] = useState([\n    {\n      name: \"L1\",\n      busy: 0,\n      address: \"\",\n    },\n    {\n      name: \"L2\",\n      busy: 0,\n      address: \"\",\n    },\n    {\n      name: \"L3\",\n      busy: 0,\n      address: \"\",\n    },\n  ]);\n  const [storeBuffer, setStorebuffer] = useState([\n    {\n      name: \"S1\",\n      busy: 0,\n      address: \"\",\n      v: \"\",\n      q: \"\",\n      timer: 2,\n      startTime: false,\n    },\n    {\n      name: \"S2\",\n      busy: 0,\n      address: \"\",\n      v: \"\",\n      q: \"\",\n      timer: 2,\n      startTime: false,\n    },\n    {\n      name: \"S3\",\n      busy: 0,\n      address: \"\",\n      v: \"\",\n      q: \"\",\n      timer: 2,\n      startTime: false,\n    },\n  ]);\n  const [regFile, setregFile] = useState([\n    {\n      name: \"F0\",\n      qi: \"\",\n      content: \"\",\n    },\n    {\n      name: \"F1\",\n      qi: \"\",\n      content: \"44\",\n    },\n    {\n      name: \"F2\",\n      qi: \"\",\n      content: \"12\",\n    },\n    {\n      name: \"F3\",\n      qi: \"\",\n      content: \"\",\n    },\n    {\n      name: \"F4\",\n      qi: \"\",\n      content: \"33\",\n    },\n    {\n      name: \"F5\",\n      qi: \"\",\n      content: \"48\",\n    },\n    {\n      name: \"F6\",\n      qi: \"\",\n      content: \"25\",\n    },\n    {\n      name: \"F7\",\n      qi: \"\",\n      content: \"\",\n    },\n    {\n      name: \"F8\",\n      qi: \"\",\n      content: \"7\",\n    },\n    {\n      name: \"F9\",\n      qi: \"\",\n      content: \"100\",\n    },\n  ]);\n  const [addResStation, setAddresStation] = useState([\n    {\n      name: \"A1\",\n      busy: 0,\n      op: \"\",\n      vj: \"\",\n      vk: \"\",\n      qj: \"\",\n      qk: \"\",\n      a: \"\",\n      timer: 2,\n      startTime: false,\n    },\n    {\n      name: \"A2\",\n      busy: 0,\n      op: \"\",\n      vj: \"\",\n      vk: \"\",\n      qj: \"\",\n      qk: \"\",\n      a: \"\",\n      timer: 2,\n      startTime: false,\n    },\n    {\n      name: \"A3\",\n      busy: 0,\n      op: \"\",\n      vj: \"\",\n      vk: \"\",\n      qj: \"\",\n      qk: \"\",\n      a: \"\",\n      timer: 2,\n      startTime: false,\n    },\n  ]);\n  const [mulResStation, setMulresStation] = useState([\n    {\n      name: \"M1\",\n      busy: 0,\n      op: \"\",\n      vj: \"\",\n      vk: \"\",\n      qj: \"\",\n      qk: \"\",\n      a: \"\",\n      timer: 10,\n      startTime: false,\n    },\n    {\n      name: \"M2\",\n      busy: 0,\n      op: \"\",\n      vj: \"\",\n      vk: \"\",\n      qj: \"\",\n      qk: \"\",\n      a: \"\",\n      timer: 10,\n      startTime: false,\n    },\n  ]);\n  function MemoryComponent() {\n    return (\n      <>\n        <Container textAlign=\"center\">\n          <Header as=\"h3\">Memory</Header>\n          <Table celled>\n            <Table.Header>\n              <Table.Row>\n                <Table.HeaderCell>Register</Table.HeaderCell>\n                <Table.HeaderCell>Content</Table.HeaderCell>\n              </Table.Row>\n            </Table.Header>\n            <Table.Body>\n              {Memory.map((c, i) => (\n                <Table.Row key={i}>\n                  <Table.Cell>{\"R\" + i}</Table.Cell>\n                  <Table.Cell>{c}</Table.Cell>\n                </Table.Row>\n              ))}\n            </Table.Body>\n          </Table>\n        </Container>\n      </>\n    );\n  }\n\n  function nextCycle() {\n    if (!disable) {\n      setDisable(true);\n    }\n    setCycleNumber(cycleNumber + 1);\n    nextCycleInstruction();\n  }\n  function cycleRefresh() {\n    for (let index = 0; index < addResStation.length; index++) {\n      const element = addResStation[index];\n\n      if (\n        element.busy === 1 &&\n        element.vj !== \"\" &&\n        element.vk !== \"\" &&\n        !addResStation[index].startTime\n      ) {\n        addResStation[index].startTime = true;\n        for (let j = 0; j < instructions.length; j++) {\n          if (\n            instructions[j].station === element.name &&\n            instructions[j].executionComplete.start === 0\n          ) {\n            console.log(instructions);\n            instructions[j].toBeExecuted = true;\n            const temp = cycleNumber;\n            instructions[j].executionComplete = { start: temp, end: 0 };\n            console.log(instructions);\n            break;\n          }\n        }\n      }\n    }\n\n    for (let index = 0; index < mulResStation.length; index++) {\n      const element = mulResStation[index];\n\n      if (\n        element.busy === 1 &&\n        element.vj !== \"\" &&\n        element.vk !== \"\" &&\n        !mulResStation[index].startTime\n      ) {\n        mulResStation[index].op === \"DIV.D\"\n          ? (mulResStation[index].timer = 20)\n          : (mulResStation[index].timer = 10);\n\n        mulResStation[index].startTime = true;\n        for (let j = 0; j < instructions.length; j++) {\n          if (\n            instructions[j].station === element.name &&\n            instructions[j].executionComplete.start === 0\n          ) {\n            instructions[j].toBeExecuted = true;\n            const temp = cycleNumber;\n            instructions[j].executionComplete = { start: temp, end: 0 };\n\n            break;\n          }\n        }\n      }\n    }\n    for (let index = 0; index < storeBuffer.length; index++) {\n      const element = storeBuffer[index];\n\n      if (element.v !== \"\") {\n        storeBuffer[index].startTime = true;\n        for (let j = 0; j < instructions.length; j++) {\n          if (\n            instructions[j].station === element.name &&\n            instructions[j].executionComplete.start === 0\n          ) {\n            instructions[j].toBeExecuted = true;\n            const temp = cycleNumber;\n            instructions[j].executionComplete = { start: temp, end: 0 };\n          }\n        }\n      }\n    }\n\n    for (let index = 0; index < addResStation.length; index++) {\n      const element = addResStation[index];\n      if (element.busy === 1) {\n        if (element.timer === 0) {\n          let tag = \"\";\n          let value = 0;\n          switch (element.op) {\n            default:\n              break;\n            case \"ADD.D\":\n              {\n                tag = element.name;\n                value = parseInt(element.vj) + parseInt(element.vk);\n\n                broadCast({ tag, value });\n              }\n              break;\n            case \"SUB.D\":\n              {\n                tag = element.name;\n                value = parseInt(element.vj) - parseInt(element.vk);\n\n                broadCast({ tag, value });\n              }\n              break;\n          }\n          addResStation[index].busy = 0;\n          addResStation[index].op = \"\";\n          addResStation[index].vj = \"\";\n          addResStation[index].vk = \"\";\n          addResStation[index].startTime = false;\n        } else if (element.startTime) {\n          addResStation[index].timer = addResStation[index].timer - 1;\n        }\n      }\n    }\n\n    for (let index = 0; index < mulResStation.length; index++) {\n      const element = mulResStation[index];\n      if (element.busy === 1) {\n        if (element.timer === 0) {\n          let tag = \"\";\n          let value = 0;\n          switch (element.op) {\n            default:\n              break;\n            case \"MUL.D\":\n              {\n                tag = element.name;\n                value = parseInt(element.vj) * parseInt(element.vk);\n\n                broadCast({ tag, value });\n              }\n              break;\n            case \"DIV.D\":\n              {\n                broadCast(\n                  element.name,\n                  parseInt(element.vj) / parseInt(element.vk)\n                );\n              }\n              break;\n          }\n          mulResStation[index].busy = 0;\n          mulResStation[index].op = \"\";\n          mulResStation[index].vj = \"\";\n          mulResStation[index].vk = \"\";\n          mulResStation[index].startTime = false;\n        } else if (element.startTime) {\n          let temp = mulResStation[index].timer;\n\n          mulResStation[index].timer = temp - 1;\n          setMulresStation([...mulResStation]);\n        }\n      }\n    }\n    for (let index = 0; index < storeBuffer.length; index++) {\n      const element = storeBuffer[index];\n      if (element.busy === 1) {\n        if (element.timer === 0) {\n          Memory[storeBuffer[index].address % 9] = storeBuffer[index].v;\n          storeBuffer[index].busy = 0;\n          storeBuffer[index].v = \"\";\n          storeBuffer[index].address = \"\";\n          storeBuffer[index].startTime = false;\n        } else if (element.startTime) {\n          storeBuffer[index].timer--;\n        }\n      }\n    }\n    ////////\n    for (let index = 0; index < instructions.length; index++) {\n      const element = instructions[index];\n      if (\n        element.issue != 0 &&\n        element.toBeExecuted &&\n        element.executionComplete.start == 0\n      ) {\n        console.log(instructions[index]);\n        const temp = cycleNumber;\n        instructions[index].executionComplete = { start: temp, end: 0 };\n      }\n      if (\n        element.issue != 0 &&\n        element.toBeExecuted &&\n        element.executionComplete.start != 0 &&\n        element.executionComplete.end == 0\n      ) {\n        switch (element.opcode) {\n          default:\n            break;\n          case \"L.D\":\n            {\n              if (cycleNumber - element.executionComplete.start == 1) {\n                instructions[index].executionComplete.end = cycleNumber;\n              }\n            }\n            break;\n          case \"S.D\":\n            {\n              if (cycleNumber - element.executionComplete.start == 1) {\n                instructions[index].executionComplete.end = cycleNumber;\n              }\n            }\n            break;\n          case \"ADD.D\":\n            {\n              if (cycleNumber - element.executionComplete.start == 1) {\n                instructions[index].executionComplete.end = cycleNumber;\n              }\n            }\n            break;\n          case \"MUL.D\":\n            {\n              if (cycleNumber - element.executionComplete.start == 9) {\n                instructions[index].executionComplete.end = cycleNumber;\n              }\n            }\n            break;\n          case \"SUB.D\":\n            {\n              if (cycleNumber - element.executionComplete.start == 1) {\n                instructions[index].executionComplete.end = cycleNumber;\n              }\n            }\n            break;\n          case \"DIV.D\":\n            {\n              if (cycleNumber - element.executionComplete.start == 20) {\n                instructions[index].executionComplete.end = cycleNumber;\n              }\n            }\n            break;\n        }\n      } else if (\n        element.issue != 0 &&\n        element.toBeExecuted &&\n        element.executionComplete.start != 0 &&\n        element.executionComplete.end != 0 &&\n        element.writeResult == 0\n      ) {\n        instructions[index].writeResult = cycleNumber;\n\n        let value = 0;\n        switch (element.opcode) {\n          default:\n            break;\n          case \"L.D\": {\n            let station;\n            let memval;\n            for (let index = 0; index < loadBuffer.length; index++) {\n              if (loadBuffer[index].name === element.station) {\n                station = loadBuffer[index].name;\n                memval = Memory[loadBuffer[index].address % 9];\n                loadBuffer[index].busy = 0;\n                loadBuffer[index].address = \"\";\n                break;\n              }\n            }\n            instructions[index].station = \"\";\n\n            broadCast({ tag: station, value: memval });\n          }\n          case \"MUL.D\":\n            instructions[index].station = \"\";\n            break;\n          case \"DIV.D\":\n            instructions[index].station = \"\";\n            break;\n          case \"ADD.D\":\n            instructions[index].station = \"\";\n            break;\n          case \"SUB.D\":\n            instructions[index].station = \"\";\n            break;\n          case \"S.D\":\n            instructions[index].station = \"\";\n            break;\n        }\n      }\n    }\n    setStorebuffer([...storeBuffer]);\n    setMulresStation([...mulResStation]);\n    setAddresStation([...addResStation]);\n    setInstructions([...instructions]);\n  }\n\n  function broadCast({ tag, value }) {\n    for (let index = 0; index < regFile.length; index++) {\n      const element = regFile[index];\n      if (element.qi === tag) {\n        regFile[index].content = value;\n        regFile[index].qi = \"\";\n      }\n    }\n    setregFile([...regFile]);\n    for (let index = 0; index < addResStation.length; index++) {\n      const element = addResStation[index];\n      if (element.qj === tag) {\n        addResStation[index].qj = \"\";\n        addResStation[index].vj = value;\n      }\n      if (element.qk === tag) {\n        addResStation[index].qk = \"\";\n        addResStation[index].vk = value;\n      }\n    }\n    setAddresStation([...addResStation]);\n    for (let index = 0; index < mulResStation.length; index++) {\n      const element = mulResStation[index];\n      if (element.qj === tag) {\n        mulResStation[index].qj = \"\";\n        mulResStation[index].vj = value;\n      }\n      if (element.qk === tag)\n        if (element.qk === tag) {\n          mulResStation[index].qk = \"\";\n          mulResStation[index].vk = value;\n        }\n    }\n    setMulresStation([...mulResStation]);\n    for (let index = 0; index < storeBuffer.length; index++) {\n      const element = storeBuffer[index];\n      if (element.q === tag) {\n        storeBuffer[index].q = \"\";\n        storeBuffer[index].v = value;\n      }\n    }\n    setStorebuffer([...storeBuffer]);\n  }\n  function nextCycleInstruction() {\n    cycleRefresh();\n\n    currentInstruction = currentInstruction + 1;\n    const nextInstruction = instructions[currentInstruction];\n    if (nextInstruction) {\n      switch (nextInstruction.opcode) {\n        case \"L.D\":\n          checkLoad(nextInstruction);\n          break;\n        case \"S.D\":\n          checkStore(nextInstruction);\n          break;\n        case \"MUL.D\":\n          checkMul(nextInstruction);\n          break;\n        case \"SUB.D\":\n          checkAdd(nextInstruction);\n          break;\n        case \"ADD.D\":\n          checkAdd(nextInstruction);\n          break;\n        case \"DIV.D\":\n          checkMul(nextInstruction);\n          break;\n      }\n    }\n  }\n\n  function checkMul(nextInstruction) {\n    for (let index = 0; index < mulResStation.length; index++) {\n      const element = mulResStation[index];\n      if (element.busy === 0) {\n        instructions[currentInstruction].issue = cycleNumber;\n        instructions[currentInstruction].station = element.name;\n        mulResStation[index].busy = 1;\n        mulResStation[index].op = nextInstruction.opcode;\n\n        const regFiletemp = regFile.map((file) =>\n          file.name != nextInstruction.destination\n            ? file\n            : { name: file.name, qi: element.name, content: \"\" }\n        );\n        setregFile([...regFiletemp]);\n\n        const j = nextInstruction.j;\n        const k = nextInstruction.k;\n        for (let i = 0; i < regFile.length; i++) {\n          if (regFile[i].name === j) {\n            if (regFile[i].qi === \"\") {\n              mulResStation[index].vj = regFile[i].content;\n            } else {\n              mulResStation[index].qj = regFile[i].qi;\n            }\n          }\n          if (regFile[i].name === k) {\n            if (regFile[i].qi === \"\") {\n              mulResStation[index].vk = regFile[i].content;\n            } else {\n              mulResStation[index].qk = regFile[i].qi;\n            }\n          }\n\n          if (mulResStation[index].vj != \"\" && mulResStation[index].vk != \"\") {\n            instructions[currentInstruction].toBeExecuted = true;\n          }\n        }\n        return;\n      }\n    }\n    currentInstruction = currentInstruction - 1;\n  }\n  function checkAdd(nextInstruction) {\n    for (let index = 0; index < addResStation.length; index++) {\n      const element = addResStation[index];\n      if (element.busy === 0) {\n        instructions[currentInstruction].issue = cycleNumber;\n        instructions[currentInstruction].station = element.name;\n        addResStation[index].busy = 1;\n        addResStation[index].op = nextInstruction.opcode;\n\n        const regFiletemp = regFile.map((file) =>\n          file.name != nextInstruction.destination\n            ? file\n            : { name: file.name, qi: element.name, content: \"\" }\n        );\n        setregFile([...regFiletemp]);\n\n        const j = nextInstruction.j;\n        const k = nextInstruction.k;\n        for (let i = 0; i < regFile.length; i++) {\n          if (regFile[i].name === j) {\n            if (regFile[i].qi === \"\") {\n              addResStation[index].vj = regFile[i].content;\n            } else {\n              addResStation[index].qj = regFile[i].qi;\n            }\n          }\n          if (regFile[i].name === k) {\n            if (regFile[i].qi === \"\") {\n              addResStation[index].vk = regFile[i].content;\n            } else {\n              addResStation[index].qk = regFile[i].qi;\n            }\n          }\n\n          if (addResStation[index].vj != \"\" && addResStation[index].vk != \"\") {\n            instructions[currentInstruction].toBeExecuted = true;\n          }\n        }\n        return;\n      }\n    }\n    currentInstruction = currentInstruction - 1;\n  }\n  function checkStore(nextInstruction) {\n    for (let index = 0; index < storeBuffer.length; index++) {\n      const element = storeBuffer[index];\n      if (element.busy === 0) {\n        instructions[currentInstruction].issue = cycleNumber;\n        instructions[currentInstruction].station = element.name;\n        storeBuffer[index].busy = 1;\n        storeBuffer[index].address =\n          Register[nextInstruction.k] + parseInt(nextInstruction.j);\n\n        const dest = nextInstruction.destination;\n        for (let j = 0; j < regFile.length; j++) {\n          if (regFile[j].name === dest) {\n            if (regFile[j].qi === \"\") {\n              storeBuffer[index].v = regFile[j].content;\n\n              instructions[currentInstruction].toBeExecuted = true;\n            } else {\n              storeBuffer[index].q = regFile[j].qi;\n            }\n          }\n        }\n        return;\n      }\n    }\n    currentInstruction = currentInstruction - 1;\n  }\n  function checkLoad(nextInstruction) {\n    for (let index = 0; index < loadBuffer.length; index++) {\n      const element = loadBuffer[index];\n      if (element.busy == 0) {\n        element.busy = 1;\n        element.address = Registerfile[nextInstruction.k] + nextInstruction.j;\n        const regFiletemp = regFile.map((file) =>\n          file.name != nextInstruction.destination\n            ? file\n            : { name: file.name, qi: element.name, content: \"\" }\n        );\n        setregFile([...regFiletemp]);\n        instructions[currentInstruction].issue = cycleNumber;\n        instructions[currentInstruction].toBeExecuted = true;\n        instructions[currentInstruction].station = element.name;\n        setInstructions(instructions);\n        loadBuffer[index].busy = 1;\n\n        loadBuffer[index].address =\n          parseInt(Register[nextInstruction.k]) + parseInt(nextInstruction.j);\n        setLoadbuffer([...loadBuffer]);\n\n        return;\n      }\n    }\n    currentInstruction = currentInstruction - 1;\n  }\n\n  return (\n    <div className=\"App\">\n      <nav className=\"navbar\">\n        <div\n          style={{\n            border: \"1px solid\",\n            color: \"#ac3714\",\n            display: \"flex\",\n            justifyContent: \"space-between\",\n            width: \"392px\",\n          }}\n        >\n          <h6>ADD.D/SUB.D : 3 Cycles</h6>\n          <h6>S.D/L.D : 2 Cycles</h6>\n          <h6>MUL.D: 10 Cycles </h6> <h6>DIV.D: 20 Cycles</h6>\n        </div>\n        <h1 style={{ marginTop: 20, fontFamily: \"cursive\" }}>\n          TOMASULO ARCHITECTURE VIUALISER\n        </h1>\n      </nav>\n      <Grid celled=\"internally\" columns=\"equal\">\n        <Grid.Row columns={2}>\n          <Grid.Column>\n            <Grid.Row>\n              <Grid.Column textAlign=\"center\">\n                <Segment textAlign=\"center\">\n                  <Header>Instruction Adder</Header>\n                  <InputInstructions\n                    disabled={disable}\n                    addInstruction={setInstructions}\n                    instructionSet={instructions}\n                    className=\"inputins\"\n                  />\n                  <InstructionQueue\n                    disabled={disable}\n                    instructionset={instructions}\n                    setInstructionset={setInstructions}\n                  />\n                </Segment>\n              </Grid.Column>\n            </Grid.Row>\n            <Grid.Row>\n              <Grid.Column>\n                <Segment>\n                  <Grid\n                    columns={2}\n                    columns=\"equal\"\n                    celled=\"internally\"\n                    textAlign=\"center\"\n                  >\n                    <Grid.Row verticalAlign=\"middle\">\n                      <Grid.Column>\n                        <LoadBuffer loadBuffer={loadBuffer} />\n                      </Grid.Column>\n\n                      <Grid.Column>\n                        <StoreBuffer storeBuffer={storeBuffer} />\n                      </Grid.Column>\n                    </Grid.Row>\n                  </Grid>\n                </Segment>\n              </Grid.Column>\n            </Grid.Row>\n\n            <Grid.Row>\n              <Grid.Column>\n                <Segment>\n                  <Grid columns={2} columns=\"equal\" textAlign=\"center\">\n                    <Grid.Row verticalAlign=\"middle\">\n                      <Grid.Column>\n                        <AddReservationStation addResStation={addResStation} />\n                      </Grid.Column>\n\n                      <Grid.Column>\n                        <MulReservationStation mulResStation={mulResStation} />\n                      </Grid.Column>\n                    </Grid.Row>\n                  </Grid>\n                </Segment>\n              </Grid.Column>\n            </Grid.Row>\n          </Grid.Column>\n\n          <Grid.Column floated=\"right\" width={6}>\n            <Grid.Column textAlign=\"center\">\n              <div style={{ position: \"fixed\", width: \"100%\" }}>\n                <Button\n                  style={{ marginBottom: 20, marginLeft: 180 }}\n                  variant=\"contained\"\n                  color=\"red\"\n                  onClick={nextCycle}\n                  disabled={instructions.length === 0}\n                >\n                  Play Cycle {cycleNumber}\n                </Button>\n\n                <Popup\n                  content=\"RESET\"\n                  trigger={\n                    <Button\n                      style={{ marginBottom: 20, left: \"14%\" }}\n                      variant=\"contained\"\n                      secondary\n                      color=\"red\"\n                      icon\n                      onClick={() => window.location.reload(false)}\n                    >\n                      <Icon name=\"refresh\" />\n                    </Button>\n                  }\n                />\n                <div className=\"rightC\">\n                  <Registerfile regFile={regFile} />\n                  <MemoryComponent />\n                </div>\n              </div>\n            </Grid.Column>\n          </Grid.Column>\n        </Grid.Row>\n      </Grid>\n    </div>\n  );\n}\n\nexport default App;\n","E:\\guc\\micro\\project\\src\\index.js",[],"E:\\guc\\micro\\project\\src\\Components\\AddReservationStation.js",["87"],"E:\\guc\\micro\\project\\src\\Components\\MulReservationStation.js",[],"E:\\guc\\micro\\project\\src\\Components\\LoadBuffer.js",[],"E:\\guc\\micro\\project\\src\\Components\\StoreBuffer.js",["88"],"E:\\guc\\micro\\project\\src\\Components\\InputInstructions.js",["89","90","91","92"],"import React, { useEffect, useState } from \"react\";\r\nimport { Button, Dropdown, Icon, Input } from \"semantic-ui-react\";\r\n\r\nimport \"semantic-ui-css/semantic.min.css\";\r\n\r\nexport default function InputInstructions({\r\n  disabled,\r\n  instructionSet,\r\n  addInstruction,\r\n}) {\r\n  const [errMesssage, setErrMessage] = useState([]);\r\n  const [err, setErr] = useState({\r\n    opcode: false,\r\n    destination: false,\r\n    j: false,\r\n    k: false,\r\n  });\r\n  const [isMemory, setIsMemory] = useState(false);\r\n  const [instruction, setInstruction] = useState({\r\n    opcode: \"\",\r\n    destination: \"\",\r\n    j: \"\",\r\n    k: \"\",\r\n    issue: 0,\r\n    executionComplete: { start: 0, end: 0 },\r\n    writeResult: 0,\r\n    toBeExecuted: false,\r\n    station: \"\",\r\n  });\r\n  const instructionOptions = [\r\n    { key: \"MUL.D\", text: \"MUL.D\", value: \"MUL.D\" },\r\n    { key: \"DIV.D\", text: \"DIV.D\", value: \"DIV.D\" },\r\n    { key: \"ADD.D\", text: \"ADD.D\", value: \"ADD.D\" },\r\n    { key: \"SUB.D\", text: \"SUB.D\", value: \"SUB.D\" },\r\n    { key: \"L.D\", text: \"L.D\", value: \"L.D\" },\r\n    { key: \"S.D\", text: \"S.D\", value: \"S.D\" },\r\n  ];\r\n  const addressOptions = [\r\n    { key: \"F0\", text: \"F0\", value: \"F0\" },\r\n    { key: \"F1\", text: \"F1\", value: \"F1\" },\r\n    { key: \"F2\", text: \"F2\", value: \"F2\" },\r\n    { key: \"F3\", text: \"F3\", value: \"F3\" },\r\n    { key: \"F4\", text: \"F4\", value: \"F4\" },\r\n    { key: \"F5\", text: \"F5\", value: \"F5\" },\r\n    { key: \"F6\", text: \"F6\", value: \"F6\" },\r\n    { key: \"F7\", text: \"F7\", value: \"F7\" },\r\n    { key: \"F8\", text: \"F8\", value: \"F8\" },\r\n    { key: \"F9\", text: \"F9\", value: \"F9\" },\r\n    { key: \"F10\", text: \"F10\", value: \"F10\" },\r\n  ];\r\n  const addressOptionsR = [\r\n    { key: \"R0\", text: \"R0\", value: \"R0\" },\r\n    { key: \"R1\", text: \"R1\", value: \"R1\" },\r\n    { key: \"R2\", text: \"R2\", value: \"R2\" },\r\n    { key: \"R3\", text: \"R3\", value: \"R3\" },\r\n    { key: \"R4\", text: \"R4\", value: \"R4\" },\r\n    { key: \"R5\", text: \"R5\", value: \"R5\" },\r\n    { key: \"R6\", text: \"R6\", value: \"R6\" },\r\n    { key: \"R7\", text: \"R7\", value: \"R7\" },\r\n    { key: \"R8\", text: \"R8\", value: \"R8\" },\r\n    { key: \"R9\", text: \"R9\", value: \"R9\" },\r\n  ];\r\n\r\n  function InstructionChange(e, { value }) {\r\n    if (value === \"L.D\" || value === \"S.D\") {\r\n      setIsMemory(true);\r\n    } else {\r\n      setIsMemory(false);\r\n    }\r\n    instruction.opcode = value;\r\n\r\n    setInstruction(instruction);\r\n  }\r\n  function DestinationChange(e, { value }) {\r\n    instruction.destination = value;\r\n\r\n    setInstruction(instruction);\r\n  }\r\n  function Reg1Change(e, { value }) {\r\n    instruction.j = value;\r\n\r\n    setInstruction(instruction);\r\n  }\r\n  function Reg2Change(e, { value }) {\r\n    instruction.k = value;\r\n    setInstruction(instruction);\r\n  }\r\n\r\n  function handleClick() {\r\n    if (instruction.opcode === \"\") {\r\n      {\r\n        err.opcode = true;\r\n      }\r\n    } else {\r\n      err.opcode = false;\r\n    }\r\n    if (instruction.destination === \"\") {\r\n      err.destination = true;\r\n    } else {\r\n      err.destination = false;\r\n    }\r\n    if (instruction.j === \"\") {\r\n      err.j = true;\r\n    } else {\r\n      err.j = false;\r\n    }\r\n    if (instruction.k === \"\") {\r\n      err.k = true;\r\n    } else {\r\n      err.k = false;\r\n    }\r\n\r\n    setErr({\r\n      opcode: err.opcode,\r\n      destination: err.destination,\r\n      j: err.j,\r\n      k: err.k,\r\n    });\r\n    if (!err.opcode && !err.destination && !err.j && !err.k) {\r\n      console.log(instruction);\r\n      const clone = { ...instruction };\r\n      instructionSet.push(clone);\r\n      addInstruction([...instructionSet]);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div className=\"dropcontainer\">\r\n        <Dropdown\r\n          error={err.opcode.isTrue}\r\n          button\r\n          floating\r\n          options={instructionOptions}\r\n          header=\"PLEASE SELECT AN INSTRUCTION\"\r\n          placeholder=\"Instruction\"\r\n          onChange={InstructionChange}\r\n        />\r\n        <Dropdown\r\n          error={err.destination.isTrue}\r\n          button\r\n          floating\r\n          options={addressOptions}\r\n          header=\"PLEASE SELECT A DESTINATION\"\r\n          placeholder=\"Destination\"\r\n          onChange={DestinationChange}\r\n        />\r\n        {isMemory ? (\r\n          <Input\r\n            error={err.j}\r\n            placeholder=\"Number\"\r\n            style={{ width: 60 }}\r\n            onChange={Reg1Change}\r\n          />\r\n        ) : (\r\n          <Dropdown\r\n            error={err.j.isTrue}\r\n            button\r\n            floating\r\n            options={addressOptions}\r\n            header=\"PLEASE SELECT REGISTER 1\"\r\n            placeholder=\"Register 1\"\r\n            onChange={Reg1Change}\r\n          />\r\n        )}\r\n        <Dropdown\r\n          error={err.k.isTrue}\r\n          button\r\n          options={isMemory ? addressOptionsR : addressOptions}\r\n          header={`PLEASE SELECT REGISTER ${isMemory ? \"1\" : \"2\"}`}\r\n          placeholder={`Register ${isMemory ? \"1\" : \"2\"}`}\r\n          onChange={Reg2Change}\r\n        />\r\n        <Button\r\n          icon\r\n          labelPosition=\"left\"\r\n          disabled={disabled}\r\n          primary\r\n          onClick={handleClick}\r\n        >\r\n          <Icon name=\"add\" />\r\n          ADD\r\n        </Button>\r\n      </div>\r\n      {(err.opcode || err.destination || err.j || err.k) && (\r\n        <div className=\"ui error message\">\r\n          <ul className=\"list\">\r\n            {err.opcode ? <li>Please choose instruction</li> : null}\r\n            {err.destination ? <li>Please choose destination</li> : null}\r\n            {err.j ? <li>Please choose registor 1</li> : null}\r\n            {err.k ? <li>Please choose registor 2</li> : null}\r\n          </ul>\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n",{"ruleId":"93","severity":1,"message":"94","line":1,"column":17,"nodeType":"95","messageId":"96","endLine":1,"endColumn":25},{"ruleId":"97","severity":1,"message":"98","line":320,"column":15,"nodeType":"99","messageId":"100","endLine":325,"endColumn":16},{"ruleId":"97","severity":1,"message":"98","line":328,"column":15,"nodeType":"99","messageId":"100","endLine":333,"endColumn":16},{"ruleId":"97","severity":1,"message":"98","line":357,"column":15,"nodeType":"99","messageId":"100","endLine":362,"endColumn":16},{"ruleId":"97","severity":1,"message":"98","line":365,"column":15,"nodeType":"99","messageId":"100","endLine":370,"endColumn":16},{"ruleId":"101","severity":1,"message":"102","line":404,"column":23,"nodeType":"103","messageId":"104","endLine":404,"endColumn":25},{"ruleId":"101","severity":1,"message":"105","line":406,"column":41,"nodeType":"103","messageId":"104","endLine":406,"endColumn":43},{"ruleId":"101","severity":1,"message":"102","line":413,"column":23,"nodeType":"103","messageId":"104","endLine":413,"endColumn":25},{"ruleId":"101","severity":1,"message":"102","line":415,"column":41,"nodeType":"103","messageId":"104","endLine":415,"endColumn":43},{"ruleId":"101","severity":1,"message":"105","line":416,"column":39,"nodeType":"103","messageId":"104","endLine":416,"endColumn":41},{"ruleId":"97","severity":1,"message":"98","line":422,"column":13,"nodeType":"99","messageId":"100","endLine":426,"endColumn":14},{"ruleId":"101","severity":1,"message":"105","line":423,"column":65,"nodeType":"103","messageId":"104","endLine":423,"endColumn":67},{"ruleId":"97","severity":1,"message":"98","line":429,"column":13,"nodeType":"99","messageId":"100","endLine":433,"endColumn":14},{"ruleId":"101","severity":1,"message":"105","line":430,"column":65,"nodeType":"103","messageId":"104","endLine":430,"endColumn":67},{"ruleId":"97","severity":1,"message":"98","line":436,"column":13,"nodeType":"99","messageId":"100","endLine":440,"endColumn":14},{"ruleId":"101","severity":1,"message":"105","line":437,"column":65,"nodeType":"103","messageId":"104","endLine":437,"endColumn":67},{"ruleId":"97","severity":1,"message":"98","line":443,"column":13,"nodeType":"99","messageId":"100","endLine":447,"endColumn":14},{"ruleId":"101","severity":1,"message":"105","line":444,"column":65,"nodeType":"103","messageId":"104","endLine":444,"endColumn":67},{"ruleId":"97","severity":1,"message":"98","line":450,"column":13,"nodeType":"99","messageId":"100","endLine":454,"endColumn":14},{"ruleId":"101","severity":1,"message":"105","line":451,"column":65,"nodeType":"103","messageId":"104","endLine":451,"endColumn":67},{"ruleId":"97","severity":1,"message":"98","line":457,"column":13,"nodeType":"99","messageId":"100","endLine":461,"endColumn":14},{"ruleId":"101","severity":1,"message":"105","line":458,"column":65,"nodeType":"103","messageId":"104","endLine":458,"endColumn":67},{"ruleId":"101","severity":1,"message":"102","line":465,"column":23,"nodeType":"103","messageId":"104","endLine":465,"endColumn":25},{"ruleId":"101","severity":1,"message":"102","line":467,"column":41,"nodeType":"103","messageId":"104","endLine":467,"endColumn":43},{"ruleId":"101","severity":1,"message":"102","line":468,"column":39,"nodeType":"103","messageId":"104","endLine":468,"endColumn":41},{"ruleId":"101","severity":1,"message":"105","line":469,"column":29,"nodeType":"103","messageId":"104","endLine":469,"endColumn":31},{"ruleId":"93","severity":1,"message":"106","line":473,"column":13,"nodeType":"95","messageId":"96","endLine":473,"endColumn":18},{"ruleId":"107","severity":1,"message":"108","line":493,"column":11,"nodeType":"109","messageId":"110","endLine":495,"endColumn":19},{"ruleId":"111","severity":1,"message":"112","line":566,"column":7,"nodeType":"113","messageId":"114","endLine":585,"endColumn":8},{"ruleId":"101","severity":1,"message":"102","line":599,"column":21,"nodeType":"103","messageId":"104","endLine":599,"endColumn":23},{"ruleId":"101","severity":1,"message":"102","line":623,"column":39,"nodeType":"103","messageId":"104","endLine":623,"endColumn":41},{"ruleId":"101","severity":1,"message":"102","line":623,"column":72,"nodeType":"103","messageId":"104","endLine":623,"endColumn":74},{"ruleId":"101","severity":1,"message":"102","line":642,"column":21,"nodeType":"103","messageId":"104","endLine":642,"endColumn":23},{"ruleId":"101","severity":1,"message":"102","line":666,"column":39,"nodeType":"103","messageId":"104","endLine":666,"endColumn":41},{"ruleId":"101","severity":1,"message":"102","line":666,"column":72,"nodeType":"103","messageId":"104","endLine":666,"endColumn":74},{"ruleId":"101","severity":1,"message":"105","line":705,"column":24,"nodeType":"103","messageId":"104","endLine":705,"endColumn":26},{"ruleId":"101","severity":1,"message":"102","line":709,"column":21,"nodeType":"103","messageId":"104","endLine":709,"endColumn":23},{"ruleId":"115","severity":1,"message":"116","line":776,"column":21,"nodeType":"117","endLine":776,"endColumn":36},{"ruleId":"115","severity":1,"message":"116","line":797,"column":37,"nodeType":"117","endLine":797,"endColumn":52},{"ruleId":"93","severity":1,"message":"118","line":2,"column":10,"nodeType":"95","messageId":"96","endLine":2,"endColumn":20},{"ruleId":"93","severity":1,"message":"118","line":2,"column":10,"nodeType":"95","messageId":"96","endLine":2,"endColumn":20},{"ruleId":"93","severity":1,"message":"119","line":1,"column":17,"nodeType":"95","messageId":"96","endLine":1,"endColumn":26},{"ruleId":"93","severity":1,"message":"120","line":11,"column":10,"nodeType":"95","messageId":"96","endLine":11,"endColumn":21},{"ruleId":"93","severity":1,"message":"121","line":11,"column":23,"nodeType":"95","messageId":"96","endLine":11,"endColumn":36},{"ruleId":"97","severity":1,"message":"122","line":91,"column":7,"nodeType":"99","messageId":"123","endLine":93,"endColumn":8},"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","no-lone-blocks","Block is redundant.","BlockStatement","redundantBlock","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","Expected '===' and instead saw '=='.","'value' is assigned a value but never used.","no-fallthrough","Expected a 'break' statement before 'case'.","SwitchCase","case","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","'makeStyles' is defined but never used.","'useEffect' is defined but never used.","'errMesssage' is assigned a value but never used.","'setErrMessage' is assigned a value but never used.","Nested block is redundant.","redundantNestedBlock"]